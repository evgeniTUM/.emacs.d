* Initialization
** Notes

Code snippets were taken from various wikis, blogs and forums.
For the most part there are no credits and references as this configuration
is intended for personal use only.

** Paths
   #+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/")
(require 'cl)
   #+end_src

** Encoding
#+begin_src emacs-lisp
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment "UTF-8")
(prefer-coding-system 'utf-8)
#+end_src

* ORG mode
** General
  #+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
(add-hook 'org-mode-hook 
          '(lambda () 
             (flyspell-mode)
             (local-unset-key (kbd "C-c SPC"))
             (org-indent-mode)))

(setq org-completion-use-iswitchb t)
(setq org-export-babel-evaluate 'inline-only)

(require 'org-eshell)
  #+END_SRC

** integrate ebib
#+begin_src emacs-lisp
(org-add-link-type "ebib" 'ebib)
(setq ebib-preload-bib-files '("~/thesis/bibliography.bib"))

(org-add-link-type 
 "ebib" 'ebib
 (lambda (path desc format)
   (cond
    ((eq format 'html)
     (format "(<cite>%s</cite>)" path))
    ((eq format 'latex)
     (if (or (not desc) (equal 0 (search "cite:" desc)))
         (format "\\cite{%s}" path)
       (format "\\cite[%s][%s]{%s}"
               (cadr (split-string desc ";"))
               (car (split-string desc ";"))  path))))))
#+end_src

** LaTeX

*** Xelatex
http://joat-programmer.blogspot.de/2013/07/org-mode-version-8-and-pdf-export-with.html
and 
http://orgmode.org/worg/org-faq.html#using-xelatex-for-pdf-export

#+begin_src emacs-lisp
  (require 'ox-latex)
#+end_src

*** RefTex integration
#+begin_src emacs-lisp
  (defun evgeni/org-mode-setup ()
    (when (and (buffer-file-name)
               (file-exists-p (buffer-file-name)))
      (load-library "reftex")
      (and (buffer-file-name)
           (file-exists-p (buffer-file-name))
           (reftex-parse-all))))
  (add-hook 'org-mode-hook 'evgeni/org-mode-setup)
#+end_src

*** Scrbook class
#+begin_src emacs-lisp
  (require 'ox-latex)
  (unless (find "scrbook" org-latex-classes :key 'car
                :test 'equal)
    (add-to-list 'org-latex-classes
                 '("scrbook" "\\documentclass{scrbook}
                  [NO-DEFAULT-PACKAGES]
                   [EXTRA]"
                   ("\\chapter{%s}". "\\chapter*{%s}")
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src

*** Don't export some headings
#+begin_src emacs-lisp
(defun evgeni/export-delete-headlines-tagged-noheading (backend)
  (dolist (hl (nreverse (org-element-map (org-element-parse-buffer 'headline)
                                         'headline
                                         'identity)))
    (when (member "noheading" (org-element-property :tags hl))
      (goto-char (org-element-property :begin hl))
      (delete-region (point) (progn (forward-line) (point))))))

(add-to-list 'org-export-before-processing-hook
             'evgeni/export-delete-headlines-tagged-noheading)
#+end_src

*** Python
#+begin_src emacs-lisp
(defadvice org-babel-python-evaluate-session
  (around org-python-use-cpaste
          (session body &optional result-type result-params) activate)
  "add a %cpaste and '--' to the body, so that ipython does the right
thing."
  (setq body (concat "%cpaste\n" body "\n--"))
  ad-do-it  )
#+end_src

*** PlantUML
    #+BEGIN_SRC emacs-lisp
      (setq org-plantuml-jar-path
            (expand-file-name "~/.emacs.d/lib/plantuml.jar"))
    #+END_SRC

*** Ditaa
#+begin_src emacs-lisp
     (setq org-ditaa-jar-path "/usr/share/ditaa/ditaa.jar")
#+end_src

* Helm
** generic
#+begin_src emacs-lisp
(define-key minibuffer-local-map (kbd "C-c C-l") 'helm-minibuffer-history)
#+end_src

** helm-ag
#+begin_src emacs-lisp
(setq helm-ag-source-type 'file-line)
#+end_src

** helm-bibtex-hack
#+begin_src emacs-lisp
(setq helm-bibtex-bibliography "~/thesis/bibliography.bib")

(defadvice helm-bibtex-open-pdf (around evgeni/helm-bibtex-open-pdf)
  "Open the PDF associated with the entry using the function
specified in `helm-bibtex-pdf-open-function',"
  (let ((keys (helm-marked-candidates :with-wildcard t)))
    (dolist (key keys)
      (let* ((entry (helm-bibtex-get-entry key))
             (file (helm-bibtex-get-value entry 'file)))
        (if file (shell-command (concat "evince `find ~/Dropbox/configs/zotero/storage -name " (first (split-string file ":")) "` &"))
          (message "No URL or DOI found for this entry: %s"
                   key))))))

#+end_src

** helm-dash
#+begin_src emacs-lisp
(require 'helm-dash)
(setq helm-dash-docsets-path (expand-file-name "~/.emacs.d/.docsets"))
#+end_src

*** Macros
#+begin_src emacs-lisp
(defun evgeni/dash-docset-installed-p (docset)
  (file-exists-p (concat helm-dash-docsets-path "/" docset ".docset")))

(defun evgeni/dash-install-docsets (docsets)
  (mapcar (lambda (docset) 
            "install docsets if not already installed"
            (unless (evgeni/dash-docset-installed-p docset)
              (helm-dash-install-docset (replace-regexp-in-string " " "_" docset))))
          docsets))

(defmacro evgeni/dash-define-docsets-for-mode (hook docsets)
  `(progn
     (evgeni/dash-install-docsets ,docsets)
     (add-hook ,hook '(lambda () 
                        "load dashsets for this mode"
                        (setq-local helm-dash-docsets ,docsets)))))
#+end_src

*** Python
#+begin_src emacs-lisp
(evgeni/dash-define-docsets-for-mode 'python-mode-hook '("Python 2" "NumPy" "SciPy"))
#+end_src

*** Bash
#+begin_src emacs-lisp
(evgeni/dash-define-docsets-for-mode 'shell-script-mode-hook '("Bash"))
(evgeni/dash-define-docsets-for-mode 'shell-mode-hook '("Bash"))
#+end_src

*** Emacs lisp
#+begin_src emacs-lisp
(evgeni/dash-define-docsets-for-mode 'emacs-lisp-mode-hook '("Emacs Lisp"))
#+end_src

*** JavaScript
#+begin_src emacs-lisp
(evgeni/dash-define-docsets-for-mode 'javascript-mode-hook '("JavaScript"))
#+end_src

* Development
** Common
*** prog-mode-defaults
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'aggressive-indent-mode)
#+end_src

*** Highlight TODO/FIXME keywords
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 
 '(lambda ()
    (font-lock-add-keywords
     nil
     '(("\\<\\(FIXME\\|TODO\\|BUG\\):" 1 font-lock-warning-face t)))))
#+end_src

*** smartparens
#+begin_src emacs-lisp
(require 'smartparens-config)
(smartparens-global-mode t)
(show-smartparens-global-mode t)

;;; tex-mode latex-mode
(sp-with-modes '(tex-mode plain-tex-mode latex-mode)
  (sp-local-tag "i" "\"<" "\">"))

;;; html-mode
(sp-with-modes '(html-mode sgml-mode)
  (sp-local-pair "<" ">"))

;;; lisp modes
(sp-with-modes sp--lisp-modes
    (sp-local-pair "(" nil :bind "C-("))
#+end_src

**** smartparens strict mode
#+begin_src emacs-lisp
;; turn on smartparens-strict-mode on all lisp-like mode
  (dolist (sp--lisp-mode-hook
           (mapcar (lambda (x)
                     (intern (concat (symbol-name x) "-hook")))
                   sp--lisp-modes))
    (add-hook sp--lisp-mode-hook
              'smartparens-strict-mode)
    ;; inferior-emacs-lisp-mode-hook is an alias of ielm-mode-hook
    ;; and it will be overrided when you first start ielm
    (add-hook 'ielm-mode-hook
              'smartparens-strict-mode))
#+end_src

**** Advices
#+begin_src emacs-lisp
(defadvice sp-backward-delete-char (around evgeni/sp-delete-char activate)
  "Handle active-region properly"
  (if (and delete-active-region
           (use-region-p))
      (delete-region (region-beginning) (region-end))
    ad-do-it))
#+end_src

*** yasnippets
   #+BEGIN_SRC emacs-lisp
(require 'yasnippet)
(yas-global-mode 1)
(define-key yas-minor-mode-map (kbd "<tab>") nil)
(define-key yas-minor-mode-map (kbd "TAB") nil)
   #+END_SRC

*** eldoc
#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
(add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)

(add-hook 'eval-expression-minibuffer-setup-hook #'eldoc-mode)
#+end_src

*** rainbow-delimiters
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
#+end_src

*** color-identifiers-mode
#+begin_src emacs-lisp
(global-color-identifiers-mode 1)
#+end_src

** CEDET
#+begin_src emacs-lisp
(setq semantic-default-submodes '(global-semantic-idle-scheduler-mode
                                  global-semanticdb-minor-mode
                                  global-semantic-mru-bookmark-mode))
(semantic-mode 1)
#+end_src

** Lisp
*** eval-sexp-fu
#+begin_src emacs-lisp
(require 'eval-sexp-fu)
#+end_src

*** slime
  #+BEGIN_SRC emacs-lisp
    (setq inferior-lisp-program "/usr/bin/sbcl") 
    (slime-setup '(slime-fancy slime-asdf slime-company))
    
    (when (file-exists-p (expand-file-name "~/quicklisp/slime-helper.el"))
      (load (expand-file-name "~/quicklisp/slime-helper.el")))
  #+END_SRC

*** elisp-slime-nav
#+begin_src emacs-lisp
(require 'elisp-slime-nav) 
(dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
  (add-hook hook 'turn-on-elisp-slime-nav-mode))
#+end_src

*** rosemacs
   #+begin_SRC emacs-lisp
(defun evgeni/ros-slime ()
  (interactive)
  (add-to-list 'load-path (expand-file-name "~/.emacs.d/lisp/rosemacs"))
  (require 'rosemacs nil t)
  (invoke-rosemacs)
  (slime-setup '(slime-fancy slime-asdf slime-ros))
  (bind-key "C-c r" ros-keymap))
   #+END_SRC

** Python
https://github.com/xiaohanyu/oh-evgeni/emacs/blob/master/modules/ome-python.org
#+BEGIN_SRC emacs-lisp
(setq
 python-shell-interpreter-args ""
 python-shell-prompt-regexp "In \\[[0-9]+\\]: "
 python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
 python-shell-completion-setup-code
 "from IPython.core.completerlib import module_completion"
 python-shell-completion-module-string-code
 "';'.join(module_completion('''%s'''))\n"
 python-shell-completion-string-code
 "';'.join(get_ipython().Completer.all_completions('''%s'''))\n")
#+END_SRC

*** disable electric indent
#+begin_src emacs-lisp
(add-hook 'python-mode-hook '(lambda () (aggressive-indent-mode 0)))
#+end_src

*** eldoc-mode
#+begin_src emacs-lisp
(add-hook 'python-mode-hook 'eldoc-mode)
#+end_src

** Maxima
  #+BEGIN_SRC emacs-lisp
(require 'f)
(add-to-list 'load-path (first (f-glob "/usr/share/maxima/*/emacs/")))
(autoload 'maxima-mode "maxima" "Maxima mode" t)
(autoload 'imaxima "imaxima" "Frontend for maxima with Image support" t)
(autoload 'maxima "maxima" "Maxima interaction" t)
(autoload 'imath-mode "imath" "Imath mode for math formula input" t)
(setq imaxima-use-maxima-mode-flag t)
  #+END_SRC

** C++
#+begin_src emacs-lisp
(add-hook 'c-mode-hook 'c-turn-on-eldoc-mode)
(add-hook 'c++-mode-hook 'c-turn-on-eldoc-mode)
#+end_src

** Web Development
*** CSS
#+begin_src emacs-lisp
(add-hook 'css-mode 'turn-on-css-eldoc)
#+end_src

** Other
*** diff-hl
http://steckerhalter.co.vu/steckemacs.html#sec-2-11-8
#+begin_src emacs-lisp
  (global-diff-hl-mode)
  (diff-hl-margin-mode)
  
  (defun evgeni/diff-hl-update ()
    (with-current-buffer (current-buffer) (diff-hl-update)))
  
  (add-hook 'magit-refresh-file-buffer-hook 'evgeni/diff-hl-update)
#+end_src

* Scientific writing
** Textlint
check scientific writing by rules

** Grammar check
needs link-grammar installed 

   #+BEGIN_SRC emacs-lisp
     (defun evgeni/grammar-mode ()
       (interactive)
       (unless (fboundp 'grammar-mode)
         (add-to-list 'load-path (expand-file-name "~/.emacs.d/lisp/grammar"))
         (require 'grammar)
         (setq grammar-program-name (expand-file-name "~/.emacs.d/lisp/grammar/grammar")))
       (command-execute 'grammar-mode))
     
   #+END_SRC

** Synonyms
   #+BEGIN_SRC emacs-lisp
(require 'synonyms)

(setq synonyms-file (expand-file-name "~/.emacs.d/lib/thesaurus/mthesaur.txt"))
(setq synonyms-cache-file (expand-file-name "~/.emacs.d/lib/thesaurus/syn.cache"))
(setq synonyms-match-more-flag nil)
   #+END_SRC

** AucTex
  #+BEGIN_SRC emacs-lisp
(setq TeX-auto-save t)
(setq TeX-parse-self t)

(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)

(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)
(add-to-list 'auto-mode-alist '("\\.tex\\'" . latex-mode))

(add-hook 'LaTeX-mode-hook (lambda ()
                             (TeX-fold-mode 1)
			     (setq TeX-PDF-mode t)))

(setq TeX-electric-sub-and-superscript t)
  #+END_SRC

*** Viewer
  #+BEGIN_SRC emacs-lisp

(setq TeX-view-program-list '(("Evince" "evince --page-index=%(outpage) %o")))
(setq TeX-view-program-selection '((output-pdf "Evince")))
(add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
  #+END_SRC

* Environment
** Interface
*** anzu
#+begin_src emacs-lisp
(require 'anzu)
(global-anzu-mode 1)
#+end_src

*** yascroll
#+begin_src emacs-lisp
(global-yascroll-bar-mode 1)
#+end_src

** Window management
*** spaces
#+begin_src emacs-lisp
  (setq helm-spaces-new-space-query nil)
#+end_src

*** window-number
#+begin_src emacs-lisp
  (require 'window-number)
  (window-number-meta-mode)
#+end_src

**** integrate golden-ration with window-number

#+begin_src emacs-lisp
(defadvice window-number-select (after window-number-golden-ration-integration activate)
  (when golden-ratio-mode (golden-ratio)))

(unbind-key "M-0" window-number-meta-mode-map)
#+end_src

*** dedicated
#+begin_src emacs-lisp
(require 'dedicated)
#+end_src

*** transpose frame
#+begin_src emacs-lisp
(require 'transpose-frame)
#+end_src

** Navigation
*** zap-up-to-char
#+begin_src emacs-lisp
(autoload 'zap-up-to-char "misc"
  "Kill up to, but not including ARGth occurrence of CHAR.")
#+end_src

** recentf-ext
#+begin_src emacs-lisp
(require 'recentf-ext)
#+end_src

** midnight
#+begin_src emacs-lisp
(require 'midnight)
#+end_src

** guide-key
#+begin_src emacs-lisp
(guide-key-mode 1)
#+end_src

** bm (visual bookmarks)
#+begin_src emacs-lisp
  (require 'bm)
#+end_src

** occur context resize
#+begin_src emacs-lisp
(add-hook 'occur-mode-hook 'occur-context-resize-mode)
#+end_src

* Tools
** eshell
*** Helm directory history
#+begin_src emacs-lisp
(defun helm-eshell-last-dirs ()
  (mapcar (lambda (x) (cons x x))
          (ring-elements evgeni/eshell-last-dir-ring)))

(defun helm-eshell-last-dirs-actions (actions dir)
  "Return a list of helm ACTIONS available for this directory."
  `((,(format "Switch to Directory - %s" dir) . (lambda (dir)
                                                  (cd dir)
                                                  (eshell-send-input)))
    (,(format "Show directory - %s" dir) . pp)))

(setq helm-source-eshell-last-dirs
      '((name . "Directory history")
        (init . (lambda ()
                  (setq evgeni/eshell-last-dir-ring eshell-last-dir-ring)))
        (candidates-process . helm-eshell-last-dirs)
        (action-transformer . helm-eshell-last-dirs-actions)))

(defun evgeni/helm-eshell-last-dirs ()
  "Bring up the directory history of eshell."
  (interactive)
  (helm :sources '(helm-source-eshell-last-dirs)
        :buffer "*helm-directory-history*"))
#+end_src

*** Go up several directories
https://github.com/yveszoundi/emacs.d/blob/master/bootstrap/startup.org
#+begin_src emacs-lisp
(defun eshell/up (&optional level)
  "Change directory from one up to a level of folders."
  (let* ((path-level (or level 1))
         (path-levels-list (cl-loop for i from path-level downto 1 collect "../"))
         (path-string (apply #'concat path-levels-list)))
    (cd path-string)))
#+end_src

** projectile
#+begin_src emacs-lisp
  (eval-after-load "projectile"
    '(setq projectile-mode-line-lighter " Ⓟ"))
  (setq projectile-mode-line-lighter " Ⓟ")
  (projectile-global-mode)

#+end_src

* Customization
** Common
*** package mode
#+begin_src emacs-lisp
(defadvice list-packages (after evgeni/list-packages-advice activate)
  (hl-line-mode 1))
#+end_src
** Functions
*** Swap window buffer
https://gist.github.com/mariusaeriksen/287633
   #+BEGIN_SRC emacs-lisp
     (defun evgeni/swap-window-buffer (number)
       (interactive)
       (let ((other-window (nth (1- number) (window-number-list))))
         (when other-window
           (let* ((this-window (selected-window))
                  (this-buffer (window-buffer this-window))
                  (other-buffer (window-buffer other-window))
                  (this-start (window-start this-window))
                  (other-start (window-start other-window)))
             (set-window-buffer this-window other-buffer)
             (set-window-buffer other-window this-buffer)
             (set-window-start this-window other-start)
             (set-window-start other-window this-start) 
             (select-window other-window)))))
     
   #+END_SRC

*** eval-and-replace
#+begin_src emacs-lisp
(defun eval-and-replace ()
  "Replace the preceding sexp with its value."
  (interactive)
  (backward-kill-sexp)
  (condition-case nil
      (prin1 (eval (read (current-kill 0)))
             (current-buffer))
    (error (message "Invalid expression")
           (insert (current-kill 0)))))
#+end_src

*** open-line - above/below
http://emacsredux.com/blog/2013/06/15/open-line-above/

#+begin_src emacs-lisp
(defun smart-open-line ()
  "Insert an empty line after the current line.
Position the cursor at its beginning, according to the current mode."
  (interactive)
  (move-end-of-line nil)
  (newline-and-indent))

(defun smart-open-line-above ()
  "Insert an empty line above the current line.
Position the cursor at it's beginning, according to the current mode."
  (interactive)
  (move-beginning-of-line nil)
  (newline-and-indent)
  (forward-line -1)
  (indent-according-to-mode))

#+end_src

*** evgeni/show-filename
http://steckerhalter.co.vu/
#+begin_src emacs-lisp
(defun evgeni/show-file-name ()
  "Show the full path file name in the minibuffer."
  (interactive)
  (message (buffer-file-name))
  (kill-new (file-truename buffer-file-name)))
#+end_src

*** evgeni/switch-to-minibuffer-window
http://steckerhalter.co.vu/
#+begin_src emacs-lisp
(defun evgeni/switch-to-minibuffer-window ()
  "Switch to minibuffer window (if active)."
  (interactive)
  (when (active-minibuffer-window)
    (select-window (active-minibuffer-window))))
#+end_src

*** copy-line 
#+begin_src emacs-lisp
(defun evgeni/copy-line (arg)
  "Copy lines (as many as prefix argument) in the kill ring"
  (interactive "p")
  (kill-ring-save (line-beginning-position)
                  (line-beginning-position (+ 1 arg))))
#+end_src
 
*** hs-toggle-all
http://sachachua.com/blog/2006/10/emacs-hideshow/
#+begin_src emacs-lisp
(defun evgeni/hs-toggle-all ()
  "Toggle hideshow all."
  (interactive)
  (set (make-variable-buffer-local 'evgeni/hs-hide) (not evgeni/hs-hide))
  (if evgeni/hs-hide
      (hs-hide-all)
    (hs-show-all)))
#+end_src

*** next/previous buffer for same mode
#+begin_src emacs-lisp
(defun evgeni/buffer-list-same-mode ()
  (delq nil
        (mapcar (lambda (buffer)
                  (if (eq major-mode (buffer-local-value 'major-mode buffer))
                      buffer))
                (buffer-list))))

(defun evgeni/next-buffer-same-mode ()
  (interactive)
  (bury-buffer (current-buffer))
  (switch-to-buffer
   (first (evgeni/buffer-list-same-mode)))
  (message "%s" (evgeni/buffer-list-same-mode)))

(defun evgeni/previous-buffer-same-mode ()
  (interactive)
  (switch-to-buffer 
   (car (last (evgeni/buffer-list-same-mode))))
  (message "%s" (evgeni/buffer-list-same-mode)))
#+end_src

*** open important files
#+begin_src emacs-lisp
(defun evgeni/open-org-file (file)
  "Opens an org-mode file and starts header search"
  (interactive "fFile: ")
  (find-file (expand-file-name file))
  (helm-imenu))

(defun evgeni/open-init-file ()
  (interactive)
  (evgeni/open-org-file "~/.emacs.d/initialization.org"))

(defun evgeni/open-authinfo-file ()
  (interactive)
  (evgeni/open-org-file  "~/.emacs.d/.authinfo.gpg"))

(defun evgeni/open-secrets-file ()
  (interactive)
  (evgeni/open-org-file  "~/shared/secrets.org.gpg"))

(defun evgeni/open-bookmarks-file ()
  (interactive)
  (evgeni/open-org-file "~/shared/bookmarks.org"))

(defun evgeni/open-notes-file ()
  (interactive)
  (evgeni/open-org-file "~/shared/notes.org"))
#+end_src

*** switch to scratch
#+begin_src emacs-lisp
(defun evgeni/switch-to-scratch ()
  (interactive)
  (switch-to-buffer "*scratch*"))
#+end_src

** Keyboard Macros
** Options
#+begin_src emacs-lisp
(setq backup-directory-alist `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))

(add-hook 'after-save-hook
          'executable-make-buffer-file-executable-if-script-p)
(setq set-mark-command-repeat-pop t)

(defalias 'yes-or-no-p 'y-or-n-p)

(setq-default indent-tabs-mode nil)
(setq tab-width 4)

(setq sentence-end-double-space nil)
(setq scroll-preserve-screen-position t)
(setq isearch-allow-scroll t)

(setq fill-column 80)

(global-subword-mode 1)

(setq default-major-mode 'org-mode)

(setq jump-char-lazy-highlight-face nil)

(put 'upcase-region 'disabled nil)
(put 'narrow-to-page 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'set-goal-column 'disabled nil)

(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

** Mode line
*** path in mode line for shells
#+begin_src emacs-lisp
(defun add-mode-line-dirtrack ()
  (add-to-list 'mode-line-buffer-identification 
               '(:propertize (" " default-directory " ") face dired-directory)))

(add-hook 'shell-mode-hook 'add-mode-line-dirtrack)
(add-hook 'eshell-mode-hook 'add-mode-line-dirtrack)
#+end_src

*** format
#+begin_src emacs-lisp
(setq-default mode-line-format 
              '("%e "
                (:eval (propertize (number-to-string (window-number))
                                   'face 'helm-source-header))

                " "
                (:eval (propertize "%02l"
                                   'face 'font-lock-preprocessor-face)) ","
                (:eval (propertize "%02c"
                                   'face 'font-lock-preprocessor-face)) 
                " "
                (:eval (propertize "%p"))
                " "

                mode-line-mule-info
                (:eval (when overwrite-mode 
                         (propertize "O" 
                             'face 'font-lock-preprocessor-face
                             'help-echo (concat "Buffer is in "
                                                (if overwrite-mode "overwrite" "insert") " mode"))))

                (:eval (when (buffer-modified-p)
                         (propertize "X"
                                     'face 'font-lock-warning-face
                                     'help-echo "Buffer has been modified")))

                (:eval (when buffer-read-only
                         (propertize "R"
                                     'face 'font-lock-type-face
                                     'help-echo "Buffer is read-only")))  

                (:eval (when (and (buffer-file-name) (file-remote-p (buffer-file-name)))
                         (propertize "@"
                                     'face 'font-lock-type-face
                                     'help-echo "Buffer is read-only")))  
                " "
                mode-line-buffer-identification
                " "

                smartrep-mode-line-string
                mode-line-modes 
                mode-line-misc-info 
                MODE-LINE-END-SPACES

                (:eval (when vc-mode (propertize vc-mode  
                                   'face 'font-lock-string-face)))))
#+end_src

*** diminish
   #+begin_src emacs-lisp
(eval-after-load "auto-highlight-symbol"
  '(diminish 'auto-highlight-symbol-mode " H"))
(eval-after-load "eproject"
  '(diminish 'eproject-mode " E"))
(eval-after-load "flyspell"
  '(diminish 'flyspell-mode " S"))

(eval-after-load "yasnippet"
  '(diminish 'yas-minor-mode))

(eval-after-load "undo-tree"
  '(diminish 'undo-tree-mode))

(eval-after-load "helm"
  '(diminish 'helm-mode))

(eval-after-load "smartparens"
  '(diminish 'smartparens-mode))

(eval-after-load "guide-key" 
  '(diminish 'guide-key-mode))

(eval-after-load "back-button"
  '(diminish 'back-button-mode))

(eval-after-load "volatile-highlights"
  '(diminish 'volatile-highlights-mode))

(eval-after-load "anzu"
  '(diminish 'anzu-mode))

(eval-after-load "company"
  '(diminish 'company-mode " C"))

(eval-after-load "subword"
  '(diminish 'subword-mode))
   #+END_SRC

*** frame-title
#+begin_src emacs-lisp
(setq frame-title-format "%b")
#+end_src

** dired
#+begin_src emacs-lisp
(require 'dired)
(setq dired-dwim-target t)
(setq dired-recursive-deletes t)
(setq dired-recursive-copies t) 
(setq wdired-allow-to-change-permissions t)
(add-hook 'dired-mode-hook (lambda () "setup dired"
                             (hl-line-mode 1)))
#+end_src

*** Inline subdirs
#+begin_src emacs-lisp
(define-key dired-mode-map "i" 'dired-subtree-insert)
(define-key dired-mode-map "I" 'dired-maybe-insert-subdir)
(define-key dired-mode-map ";" 'dired-subtree-remove)
#+end_src

*** dired open files
http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html
#+begin_src emacs-lisp
(defun xah-open-in-external-app (&optional file)
  "Open the current file or dired marked files in external app.

The app is chosen from your OS's preference."
  (interactive)
  (let ( doIt
         (myFileList
          (cond
           ((string-equal major-mode "dired-mode") (dired-get-marked-files))
           ((not file) (list (buffer-file-name)))
           (file (list file)))))
    
    (setq doIt (if (<= (length myFileList) 5)
                   t
                 (y-or-n-p "Open more than 5 files? ") ) )
    
    (when doIt
      (cond
       ((string-equal system-type "windows-nt")
        (mapc (lambda (fPath) (w32-shell-execute "open" (replace-regexp-in-string "/" "\\" fPath t t)) ) myFileList))
       ((string-equal system-type "darwin")
        (mapc (lambda (fPath) (shell-command (format "open \"%s\"" fPath)) )  myFileList) )
       ((string-equal system-type "gnu/linux")
        (mapc (lambda (fPath) (let ((process-connection-type nil)) (start-process "" nil "xdg-open" fPath)) ) myFileList) ) ) ) ) )
#+end_src

**** open directories
#+begin_src emacs-lisp
(defun xah-open-in-desktop ()
  "Show current file in desktop (OS's file manager)."
  (interactive)
  (cond
   ((string-equal system-type "windows-nt")
    (w32-shell-execute "explore" (replace-regexp-in-string "/" "\\" default-directory t t)))
   ((string-equal system-type "darwin") (shell-command "open ."))
   ((string-equal system-type "gnu/linux")
    (let ((process-connection-type nil)) (start-process "" nil "xdg-open" "."))
    ;; (shell-command "xdg-open .") ;; 2013-02-10 this sometimes froze emacs till the folder is closed. ⁖ with nautilus
    ) ))
#+end_src

*** dired-filter-mode
#+begin_src emacs-lisp
(add-hook 'dired-mode-hook 'dired-filter-mode)
#+end_src

*** dired-rainbow
http://truongtx.me/2014/04/13/dired-as-default-file-manager-9-color-and-preview/
#+begin_src emacs-lisp
(require 'dired-rainbow)

(defconst dired-audio-files-extensions
  '("mp3" "MP3" "ogg" "OGG" "flac" "FLAC" "wav" "WAV")
  "Dired Audio files extensions")

(dired-rainbow-define audio "#329EE8" dired-audio-files-extensions)

(defconst dired-video-files-extensions
    '("vob" "VOB" "mkv" "MKV" "mpe" "mpg" "MPG" "mp4" "MP4" "ts" "TS" "m2ts"
      "M2TS" "avi" "AVI" "mov" "MOV" "wmv" "asf" "m2v" "m4v" "mpeg" "MPEG" "tp")
    "Dired Video files extensions")

(dired-rainbow-define video "#B3CCFF" dired-video-files-extensions)

(dired-rainbow-define-chmod executable-unix "Green" "-.*x.*")
#+end_src

** hippie-expand
   #+BEGIN_SRC emacs-lisp
     (setq hippie-expand-try-functions-list '(yas-hippie-try-expand
 					      try-expand-dabbrev
					      try-expand-dabbrev-from-kill
					      try-expand-dabbrev-all-buffers
					      try-expand-all-abbrevs
					      try-expand-list
					      try-expand-line))
   #+END_SRC

** uniquify
#+begin_src emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'post-forward-angle-brackets)
#+end_src

** Other
#+begin_src emacs-lisp
(global-undo-tree-mode)

(require 'volatile-highlights)
(volatile-highlights-mode t)
#+end_src

* Key bindings
** General
#+begin_src emacs-lisp
(require 'bind-key)

(defmacro evgeni/add-smartrep-bindings (prefix prefix-map &rest body)
  `(smartrep-define-key ,prefix-map
       (kbd ,prefix) '(,@body)))
 #+end_src

** TODO Completion
#+begin_src emacs-lisp
(bind-key [return] nil company-active-map)
(bind-key "\r" nil company-active-map)

(bind-key "TAB" 'company-complete-selection company-active-map)
;(bind-key  "<C-tab>" 'evgeni/company-complete-and-stay company-active-map)

(bind-keys
 ("<C-tab>" . company-complete)
 ("<s-tab>" . company-other-backend)
 ("C-s-c" . company-capf)
 ("C-s-f" . company-files)
 ("C-s-s" . company-semantic)
 ("C-s-i" . company-ispell)
 ("C-s-d" . company-dabbrev)
 ("<C-s-tab>" . company-mode)
 ("<C-M-tab>" . helm-company))
#+end_src

** Re-definitions
#+begin_src emacs-lisp
(unbind-key "C-z")
(unbind-key "C-x C-c")

(bind-keys
 ("C-z C-z" . global-set-key)
 ("C-z z" . local-set-key)
 
 ("M-\\" . cycle-spacing)
 ("<M-SPC>" . set-mark-command)
 
 ("M-/" . hippie-expand)
 
 ("M-o"     . smart-open-line)
 ("M-O"     . smart-open-line-above)
 ("C-c M-s" . center-line)
 ("C-c M-S" . center-paragraph)
 
 ("M-i" . ace-jump-mode)
 ("M-j" . jump-char-forward)
 ("M-J" . jump-char-backward)
 
 ("C-=" . er/expand-region)
 ("C-+" . er/contract-region)

 ("M-W" . evgeni/copy-line)

 ("M-z" . zap-up-to-char)
 
 ("C-h C-m" . discover-my-major)

 ("C-x k"   . kill-this-buffer)
 ("C-x j"   . direx:jump-to-directory-other-window)
 ("C-x t"   . anchored-transpose)
 ("C-h a"   . helm-apropos)
 ("C-x b"   . helm-buffers-list)
 ("C-x C-b" . ibuffer)
 ("M-x"     . helm-M-x)
 ("C-x C-f" . helm-find-files))
#+end_src

** Custom
 #+begin_src emacs-lisp
(bind-keys
 ("C-c e" . eval-and-replace)
 ("C-c A" . evgeni/open-authinfo-file)
 ("C-c S" . evgeni/open-secrets-file)
 ("C-c B" . evgeni/open-bookmarks-file)
 ("C-c E" . evgeni/open-init-file)
 ("C-c N" . evgeni/open-notes-file)
 ("C-c F" . evgeni/show-file-name)
 ("C-c G" . customize-group)
 ("C-c V" . customize-variable))

(bind-keys
 ("s-." . next-buffer)
 ("s-," . previous-buffer)
 ("s->" . evgeni/next-buffer-same-mode)
 ("s-<" . evgeni/previous-buffer-same-mode))

(bind-key
 "C-c R" 
 '(lambda ()
    "reinitialize"
    (interactive)
    (load-file 
     (expand-file-name "~/.emacs.d/init.el"))))

(bind-key "C-c l" 'slime-selector)
 #+END_SRC

** Prefixes
*** b - bm visual bookmarks
#+begin_src emacs-lisp
(bind-keys :prefix "C-c b"
           :prefix-map evgeni/bm-prefix
           ("b" . bm-toggle)
           ("s" . bm-toggle-buffer-persistence)
           ("h" . helm-bm))

(evgeni/add-smartrep-bindings "C-c b" global-map
                          ("n" . 'bm-next)
                          ("p" . 'bm-previous))
#+end_src

*** f - File management
#+begin_src emacs-lisp
(bind-keys :prefix "C-c f"
           :prefix-map evgeni/file-prefix
           ("c" . helm-complete-file-name-at-point)
           ("f" . ffap)
           ("r" . rename-buffer)
           ("<SPC>" . revert-buffer))
#+end_src

*** h - Helm bindings
 #+begin_src emacs-lisp
(bind-keys :prefix "C-c h"
           :prefix-map evgeni/helm-prefix
           ("RET" . helm-resume)
           ("SPC" . helm-all-mark-rings)
           ("C-a" . helm-ag-r-from-git-repo) 
           ("B" . helm-bibtex)
           ("C" . helm-complex-command-history)
           ("F" . helm-find)
           ("G" . helm-git-grep)
           ("L" . helm-locate-library)
           ("M" . helm-descbinds)
           ("O" . helm-multi-occur)
           ("P" . helm-browse-project)
           ("S" . math-symbols-helm)
           ("T" . helm-themes)
           ("a" . helm-ag)
           ("b" . helm-bookmarks)
           ("c" . helm-flycheck)
           ("d" . helm-dash-at-point)
           ("e" . helm-list-emacs-process)
           ("f" . helm-for-files) 
           ("g" . helm-do-grep-ag)
           ("h" . helm-semantic-or-imenu) 
           ("k" . helm-show-kill-ring)
           ("l" . helm-locate)
           ("n" . list-network-processes)
           ("o" . helm-occur)
           ("p" . helm-projectile)
           ("r" . helm-register) 
           ("t" . helm-proc)
           ("w" . helm-spaces)
           ("x" . helm-regexp)
           ("y" . helm-yas-complete))
 #+end_src
 
*** I - docu searches
 #+begin_src emacs-lisp
(bind-keys :prefix "C-c I"
           :prefix-map evgeni/helm-info-prefix
           ("e" . helm-info-emacs)
           ("o" . helm-orgcard)
           ("p" . helm-pydoc)
           ("c" . clojure-cheatsheet)
           ("m" . helm-man-woman))
 #+end_src

*** i - Interface
#+begin_src emacs-lisp
(bind-keys :prefix "C-c i"
           :prefix-map evgeni/interface-prefix
           ("b" . toggle-tool-bar-mode-from-frame)
           ("c" . fci-mode)
           ("f" . auto-fill-mode)
           ("g" . golden-ratio-mode)
           ("h" . auto-highlight-symbol-mode)
           ("l" . linum-mode)
           ("L" . hl-line-mode)
           ("m" . toggle-menu-bar-mode-from-frame)
           ("M" . minimap-mode)
           ("s" . toggle-scroll-bar)
           ("t" . tabbar-mode)
           ("v" . visual-line-mode)
           ("w" . toggle-truncate-lines))
 #+end_src

*** j - Jump bindings
#+begin_src emacs-lisp
(bind-keys :prefix "C-c j"
           :prefix-map evgeni/jump-prefix
           ("j" . helm-imenu-anywhere)
           ("s" . evgeni/switch-to-scratch))
#+end_src

*** m - Mode bindings
#+begin_src emacs-lisp
(bind-keys :prefix "C-c m"
           :prefix-map evgeni/major-modes-prefix
           ("<SPC>" . helm-enable-minor-mode)
           ("<DEL>" . helm-disable-minor-mode)
           ("m" . helm-switch-major-mode)
           ("g" . magit-status)
           ("e" . eshell)
           ("p" . proced)
           ("s" . shell)
           ("t" . ansi-term)
           ("w" . eww))
#+end_src

*** n - Internet bindings
#+begin_src emacs-lisp
(bind-keys :prefix "C-c n"
           :prefix-map evgeni/internet-prefix
           ("w" . webjump)
           ("s" . helm-google-suggest)
           ("g" . helm-google)
           ("w" . helm-wikipedia-suggest)
           ("q" . howdoi-query)
           ("Q" . howdoi-query-line-at-point))
#+end_src

*** o - org-mode
#+begin_src emacs-lisp
(bind-keys :prefix "C-c o"
           :prefix-map evgeni/org-prefix
           ("l" . org-store-link)
           ("c" . org-capture)
           ("a" . org-agenda)
           ("b" . org-iswitchb))
#+end_src

*** s - smartparens
#+begin_src emacs-lisp
(bind-keys :map sp-keymap
           ("C-M-f" . sp-forward-sexp)
           ("C-M-b" . sp-backward-sexp)
           ("C-M-n" . sp-up-sexp)
           ("C-M-p" . sp-backward-down-sexp)
           ("C-M-u" . sp-backward-up-sexp)
           ("C-M-d" . sp-down-sexp)
           ("C-M-t" . sp-transpose-sexp)

           ("C-M-k" . sp-kill-sexp)

           ("C-)" . sp-forward-slurp-sexp)
           ("C-(" . sp-backward-slurp-sexp)
           ("C-M-)" . sp-forward-barf-sexp)
           ("C-M-(" . sp-backward-barf-sexp)

           ("M-F" . sp-forward-symbol)
           ("M-B" . sp-backward-symbol)

           ("C-]" . sp-select-next-thing-exchange)
           ("C-}" . sp-select-previous-thing)
           ("C-M-]" . sp-select-next-thing)
           
           ("<s-t>" . sp-prefix-tag-object)
           ("<s-p>" . sp-prefix-pair-object))

(bind-keys :map sp-keymap
           :prefix "C-c s"
           :prefix-map smartparens-prefix
           ("M-w" . sp-copy-sexp)
           ("<SPC>" . sp-rewrap-sexp)

           ("u" . sp-unwrap-sexp)
           ("U" . sp-backward-unwrap-sexp)

           ("s" . sp-splice-sexp)
           ("f" . sp-splice-sexp-killing-forward)
           ("b" . sp-splice-sexp-killing-backward)
           ("r" . sp-splice-sexp-killing-around)

           ("c" . sp-convolute-sexp)
           ("a" . sp-absorb-sexp)
           ("e" . sp-emit-sexp)
           ("p" . sp-add-to-previous-sexp)
           ("n" . sp-add-to-next-sexp)
           ("j" . sp-join-sexp)
           ("S" . sp-split-sexp)

           ("k" . sp-kill-hybrid-sexp))
#+end_src

*** t - Toggle
#+begin_src emacs-lisp
(bind-keys :prefix "C-c t"
           :prefix-map evgeni/toggle-prefix
           ("a" . auto-revert-mode)
           ("c" . flycheck-mode)
           ("f" . hideshowvis-minor-mode)
           ("h" . helm-mode)
           ("l" . scroll-lock-mode)
           ("s" . flyspell-mode))
 #+end_src
 
 
*** w - Window management
#+begin_src emacs-lisp
(bind-keys :prefix "C-c w"
           :prefix-map evgeni/window-prefix
           ("m" . evgeni/switch-to-minibuffer-window)
           ("d" . dedicated-mode)
           ("t" . transpose-frame))

(evgeni/add-smartrep-bindings "C-c w" global-map
                          ("w" . 'winner-undo)
                          ("W" . 'winner-redo))

(evgeni/add-smartrep-bindings "C-c w c" global-map
                          ("i" . 'enlarge-window)
                          ("k" . 'shrink-window)
                          ("l" . 'enlarge-window-horizontally)
                          ("j" . 'shrink-window-horizontally)
                          ("o" . 'other-window) )
#+end_src

*** x - visual-regexp and iedit
#+begin_src emacs-lisp
(bind-keys :prefix "C-c x"
           :prefix-map evgeni/regexp-prefix
           ("x" . vr/replace)
           ("q" . vr/query-replace)
           ("m" . vr/mc-mark)

           ("i" . iedit-mode)
           
           ("l" . mc/edit-lines)
           ("a" . mc/mark-all-like-this))

(evgeni/add-smartrep-bindings "C-c x" global-map
                              ("M-n" . 'mc/mark-next-like-this)
                              ("M-p" . 'mc/mark-previous-like-this)
                              ("C-n" . 'mc/mark-next-symbol-like-this)
                              ("C-p" . 'mc/mark-previous-symbol-like-this))

#+end_src

** Other
*** goto-last-change
#+begin_src emacs-lisp
(bind-key "s-/" 'goto-last-change)
(bind-key "s-?" 'goto-last-change-reverse)
#+end_src

*** evgeni/swap-window bindings 
 #+begin_src emacs-lisp
   (bind-key "C-M-1" '(lambda () "move buffer to window 1" (interactive) (evgeni/swap-window-buffer 1)))
   (bind-key "C-M-2" '(lambda () "move buffer to window 2" (interactive) (evgeni/swap-window-buffer 2)))
   (bind-key "C-M-3" '(lambda () "move buffer to window 3" (interactive) (evgeni/swap-window-buffer 3)))
   (bind-key "C-M-4" '(lambda () "move buffer to window 4" (interactive) (evgeni/swap-window-buffer 4)))
   (bind-key "C-M-5" '(lambda () "move buffer to window 5" (interactive) (evgeni/swap-window-buffer 5)))
   (bind-key "C-M-6" '(lambda () "move buffer to window 6" (interactive) (evgeni/swap-window-buffer 6)))
   (bind-key "C-M-7" '(lambda () "move buffer to window 7" (interactive) (evgeni/swap-window-buffer 7)))
   (bind-key "C-M-8" '(lambda () "move buffer to window 8" (interactive) (evgeni/swap-window-buffer 8)))
   (bind-key "C-M-9" '(lambda () "move buffer to window 9" (interactive) (evgeni/swap-window-buffer 9)))
 #+end_src

** Local
*** view-mode
#+begin_src emacs-lisp
(add-hook 'view-mode-hook
          (lambda () "set view mode bindings"
            (bind-key "h" 'backward-char view-mode-map)
            (bind-key "l" 'forward-char view-mode-map)
            (bind-key "j" 'next-line view-mode-map)
            (bind-key "k" 'previous-line view-mode-map)))

#+end_src

*** narrow-indirect
#+begin_src emacs-lisp
(define-key ctl-x-4-map "nd" 'ni-narrow-to-defun-indirect-other-window)
(define-key ctl-x-4-map "nn" 'ni-narrow-to-region-indirect-other-window)
(define-key ctl-x-4-map "np" 'ni-narrow-to-page-indirect-other-window)
#+end_src

*** dired
#+begin_src emacs-lisp
(add-hook 'dired-mode-hook
          (lambda () "set dired bindings"
            (bind-key "C-z o" 'xah-open-in-external-app dired-mode-map)
            (bind-key "C-z d" 'xah-open-in-desktop dired-mode-map)))
#+end_src

*** org-mode
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 
          (lambda () "setup org bindings"   
            (bind-key "C-z s" 'org-screenshot org-mode-map)))
#+end_src

*** comint-mode
#+begin_src emacs-lisp
(add-hook 'comint-mode-hook 
          (lambda () "setup comint bindings"   
            (bind-key "C-z h" 'helm-comint-input-ring)))
#+end_src

*** eshell
#+begin_src emacs-lisp
(add-hook 'eshell-mode-hook 
          (lambda () "setup eshell bindings" 
            (bind-key "C-z h" 'helm-eshell-history eshell-mode-map)
            (bind-key "C-z d" 'evgeni/helm-eshell-last-dirs eshell-mode-map)))
#+end_src

*** magit
remap magit keys because of window-meta-mode
#+begin_src emacs-lisp
(add-hook 'magit-mode-hook
          #'(lambda ()
              (bind-key "C-c 1" 'magit-show-level-1-all magit-mode-map)
              (bind-key "C-c 2" 'magit-show-level-2-all magit-mode-map)
              (bind-key "C-c 3" 'magit-show-level-3-all magit-mode-map)
              (bind-key "C-c 4" 'magit-show-level-4-all magit-mode-map)))
#+end_src

*** hide-show
#+begin_src emacs-lisp
(add-hook 'hs-minor-mode-hook
          '(lambda ()
             (bind-key "<backtab>" 'hs-toggle-hiding hs-minor-mode-map)
             (bind-key "<S-s-iso-lefttab>" 'evgeni/hs-toggle-all hs-minor-mode-map)))
#+end_src

*** hideshowvis
#+begin_src emacs-lisp
(add-hook 'hideshowvis-minor-mode-hook 'hideshowvis-symbols)
#+end_src


*** eww
#+begin_src emacs-lisp
(add-hook 'eww-mode-hook
          #'(lambda ()
              (bind-key "f" 'eww-lnum-follow eww-mode-map)
              (bind-key "F" 'eww-lnum-universal eww-mode-map)))
#+end_src

* Finally
use this to spot if configuration was correctly read
#+begin_src emacs-lisp
(setq initial-scratch-message ";; Use the source Luke !!!\n")
#+end_src

* Things
** Packages

*** org-gcal 

** Completion
*** Make completion work with aspell
*** Checkout completion-at-point
** Re-mappings
C-x C-d
C-x d
M-
** eshell tramp
** hungry delete
* Inactive
:PROPERTIES:
   :header-args:    :tangle no
   :END:
** dired-async
#+begin_src emacs-lisp
(when (require 'dired-aux)
  (require 'dired-async))
#+end_src

** org-mode fix for company
#+begin_src emacs-lisp
(defun evgeni/pcomplete-capf ()
  (interactive)
  (add-hook 'completion-at-point-functions 'pcomplete-completions-at-point nil t))
(add-hook 'org-mode-hook #'evgeni/pcomplete-capf)
#+end_src

** Package management
    #+BEGIN_SRC emacs-lisp
(package-refresh-contents)
(package-install 's)
(package-install 'f)
(require 's)
(require 'f)

(defun evgeni/packages-install ()
  (interactive)
  (mapcar (lambda (x) (package-install x)) (evgeni/packages-load)))

(defun evgeni/packages-load ()
  (interactive)
  (mapcar 'intern (s-split "\n" (f-read "~/.emacs.d/saved-packages") t)))

(defun evgeni/packages-save ()
  (interactive)
  (f-write (s-join "\n" (sort (mapcar 'symbol-name (delete-duplicates package-activated-list)) 'string<)) 'utf-8 "~/.emacs.d/saved-packages"))

(evgeni/packages-install)
   #+END_SRC
 
** Emacs multimedia system EMMS
#+begin_src emacs-lisp
(require 'emms-setup)
(emms-all)
(emms-default-players)
#+end_src

** IPython Emacs Notebook (ein)

#+begin_src emacs-lisp
(package-initialize)
(require 'ein)
(require 'ein-loaddefs)
(require 'ein-notebook)
(require 'ein-subpackages)
#+end_src
** save-packages
#+begin_src emacs-lisp
(add-hook 'kill-emacs-hook 'evgeni/packages-save)
#+end_src

** drag-stuff
#+begin_src emacs-lisp
  (setq drag-stuff-modifier '(meta super))
  (drag-stuff-global-mode t)
#+end_src

